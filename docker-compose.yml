version: '3.8'

services:
  # Banking Compliance Streamlit Application
  banking-compliance-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: banking-compliance-streamlit
    restart: unless-stopped
    ports:
      - "8501:8501"  # Streamlit port
    environment:
      - APP_MODE=streamlit
      - STREAMLIT_SERVER_PORT=8501
      - STREAMLIT_SERVER_ADDRESS=0.0.0.0
      # Override these in .env file or docker-compose.override.yml
      - GROQ_API_KEY=${GROQ_API_KEY:-your_groq_api_key_here}
      - APP_USERNAME=${APP_USERNAME:-admin}
      - APP_PASSWORD=${APP_PASSWORD:-admin_password}
      - DB_SERVER_NAME=${DB_SERVER_NAME:-your_server.database.windows.net}
      - DB_NAME=${DB_NAME:-compliance_db}
      - DB_USERNAME=${DB_USERNAME:-your_username}
      - DB_PASSWORD=${DB_PASSWORD:-your_password}
      - DB_PORT=${DB_PORT:-1433}
      - USE_ENTRA_AUTH=${USE_ENTRA_AUTH:-false}
      - ENTRA_DOMAIN=${ENTRA_DOMAIN:-yourdomain.onmicrosoft.com}
    volumes:
      # Mount for persistent configuration (optional)
      - ./config:/app/config:ro
      # Mount for logs
      - ./logs:/app/logs
      # Mount secrets if you prefer external file management
      - ./.streamlit/secrets.toml:/app/.streamlit/secrets.toml:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - banking-compliance-network
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.banking-app.rule=Host(`banking-compliance.local`)"
      - "traefik.http.services.banking-app.loadbalancer.server.port=8501"

  # Banking Compliance API Service
  banking-compliance-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: banking-compliance-api
    restart: unless-stopped
    ports:
      - "8000:8000"  # FastAPI port
    environment:
      - APP_MODE=api
      # Same environment variables as the Streamlit app
      - GROQ_API_KEY=${GROQ_API_KEY:-your_groq_api_key_here}
      - APP_USERNAME=${APP_USERNAME:-admin}
      - APP_PASSWORD=${APP_PASSWORD:-pass123}
      - DB_SERVER_NAME=${DB_SERVER_NAME:-your_server.database.windows.net}
      - DB_NAME=${DB_NAME:-compliance_db}
      - DB_USERNAME=${DB_USERNAME:-your_username}
      - DB_PASSWORD=${DB_PASSWORD:-your_password}
      - DB_PORT=${DB_PORT:-1433}
      - USE_ENTRA_AUTH=${USE_ENTRA_AUTH:-false}
      - ENTRA_DOMAIN=${ENTRA_DOMAIN:-yourdomain.onmicrosoft.com}
    volumes:
      - ./logs:/app/logs
      - ./.streamlit/secrets.toml:/app/.streamlit/secrets.toml:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - banking-compliance-network
    depends_on:
      - redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.banking-api.rule=Host(`banking-api.local`)"
      - "traefik.http.services.banking-api.loadbalancer.server.port=8000"

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: banking-compliance-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-banking_compliance_redis}
    volumes:
      - redis_data:/data
    networks:
      - banking-compliance-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: banking-compliance-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - banking-compliance-network
    depends_on:
      - banking-compliance-app
      - banking-compliance-api
    profiles:
      - with-nginx  # Only start when specifically requested

  # Optional: PostgreSQL for local development/testing
  postgres:
    image: postgres:15-alpine
    container_name: banking-compliance-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-compliance_db}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - banking-compliance-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - with-postgres  # Only start when specifically requested

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  banking-compliance-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16